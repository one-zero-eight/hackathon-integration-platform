name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  backend-ci:
    runs-on: ubuntu-latest
    steps:
      - name: Получение кода
        uses: actions/checkout@v4

      - name: Настройка Docker
        uses: docker/setup-buildx-action@v3

      - name: Сборка и запуск бэкенда
        run: |
          cd backend
          docker compose build --pull
          docker compose up -d
        env:
          POSTGRES_PASSWORD: postgres

      - name: Проверка состояния контейнеров
        run: docker ps

      - name: Остановка и очистка
        run: |
          cd backend
          docker compose down

  frontend-ci:
    runs-on: ubuntu-latest
    steps:
      - name: Получение кода
        uses: actions/checkout@v4

      - name: Настройка Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Настройка pnpm
        uses: pnpm/action-setup@v3
        with:
          version: latest
          run_install: false

      - name: Получение директории кэша pnpm
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Настройка кэша pnpm
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Установка зависимостей
        run: |
          cd frontend
          pnpm install

      - name: Проверка форматирования
        run: |
          cd frontend
          pnpm check

      - name: Сборка фронтенда
        run: |
          cd frontend
          pnpm build

  deploy:
    needs: [backend-ci, frontend-ci]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Получение кода
        uses: actions/checkout@v4

      - name: Настройка SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Проверка подключения
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
          ssh -vvv -T ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} echo "Успех!"

      - name: Добавление known_hosts
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Деплой бэкенда
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "
          cd ${{ secrets.BACKEND_PATH }} && \
          git config pull.rebase true && \
          git pull && \
          docker compose down && \
          docker images -q backend-api | grep . && docker rmi backend-api || echo 'No image to remove' && \
          docker volume rm backend_postgres || echo 'Volume not found' && \
          docker compose up -d"

      - name: Деплой фронтенда
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "cd ${{ secrets.FRONTEND_PATH }} && git pull && export PATH=$PATH:/root/.local/share/pnpm/ && pnpm install && pnpm build && pm2 restart frontend || pm2 start pnpm --name frontend -- start"